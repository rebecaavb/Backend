const express = require('express'); //importando o express (conjunto de ferramentas que dÃ£o a possibilidade de incluir rotas na aplicaÃ§Ã£o para acessar endereÃ§os diferentes e vai gerenciar pra nÃ³s)

const cors = require('cors');
//Id Ãºnico universal
const { v4: uuid_v4, validate } = require('uuid'); //importando parcialmente algo atravÃ©s das {}

const app = express(); //criando aplicaÃ§Ã£o

app.use(cors());

//deve vir ANTES DAS ROTAS
app.use(express.json()); //adicionar algum tipo de funÃ§Ã£o que todas as rotas vÃ£o ter que passar por elas

//gerenciando rotas
//parÃ¢metros para acessar rota na URL 
//nÃ£o necessariamente preciso ouvir um endereÃ§o (projects), se colocar apenas /

/** 
 * MÃ©todos HTTP:
 * 
 * GET: Buscar informaÃ§Ãµes do back-end
 * POST: Criar uma informaÃ§Ã£o no back-end
 * PUT/PATCH: Alterar uma informaÃ§Ã£o no back-end (O segundo Ã© utilizado para alterar coisas especÃ­ficas)
 * DELETE: Deletar uma informaÃ§Ã£o no back-end
 */

/**
 * Tipos de parÃ¢metros:
 * 
 * Query Params: Filtros e paginaÃ§Ã£o -> title=React&owner=Rebeca
 * Route Params: Identificar recursos (Atualizar/Deletar)
 * Request Body: ConteÃºdo na hora de criar ou editar um recurso (JSON)
 */


/**
 * Middleware:
 * 
 * Interceptador de requisiÃ§Ãµes que pode interromper totalmente a requisiÃ§Ã£o ou alterar dados da requisiÃ§Ã£o.
 */

var projects = [];

function logRequests(request, response, next) {
    const { method, url } = request;

    const logLabel = `[${method.toUpperCase()}] ${url}`;

    console.time(logLabel);

    /**se eu nÃ£o chamar next para o prÃ³ximo middleware 
    (que sÃ£o as requisiÃ§Ãµes, ele NÃƒO continua executando)*/
    next(); //PrÃ³ximo middleware

    console.timeEnd(logLabel);
}

function validateProjectId(request, response, next) {
    const { id } = request.params;

    if (!validate(id)) {
        return response.status(400).json({ error: 'Invalid project ID.' });
    }

    return next();
}

app.use(logRequests);
app.use('/projects/:id', validateProjectId); //adicionando middleware de validaÃ§Ã£o somente nos mÃ©todos de PUT e DELETE

//GET
//pode colocar quantos middlewares quisermos antes das requisiÃ§Ãµes
app.get('/projects', (request, response) => {
    // const query = request.query;
    // console.log(query);

    // const { title, owner } = request.query;
    // console.log(title);
    // console.log(owner);

    const { title } = request.query;

    const results = title
        ? projects.filter(project => project.title.includes(title))
        : projects;

    return response.json(results);
});

//POST
app.post('/projects', (request, response) => {
    const { title, owner } = request.body;

    //criando id Ãºnico
    const project = { id: uuid_v4(), title, owner };

    projects.push(project);

    return response.json(project);
});

//PUT
app.put('/projects/:id', (request, response) => {
    //const params = request.params;
    // console.log(params);

    //acessando id da URL
    const { id } = request.params;
    //acessando body da requisiÃ§Ã£o
    const { title, owner } = request.body;

    //procurando projeto dentro da lista de projetos com o id vindo da URL
    const projectIndex = projects.findIndex(project => project.id == id);

    //se nÃ£o encontrou o id, retorna mensagem de erro
    if (projectIndex < 0) {
        return response.status(400).json({ error: 'Project not found.' });
    }

    //criando um novo projeto pra substituir o antigo
    const project = {
        id,
        title,
        owner,
    };

    //substituindo projeto na lista
    projects[projectIndex] = project;

    return response.json(project);
});

//DELETE
app.delete('/projects/:id', (request, response) => {
    const { id } = request.params;

    const projectIndex = projects.findIndex(project => project.id == id);

    if (projectIndex < 0) {
        return response.status(400).json({ error: 'Project not found.' });
    }

    //remover algum dado de dentro do array
    projects.splice(projectIndex, 1); //-> quantas posiÃ§Ãµes eu quero remover a partir desse Ã­ndice

    return response.status(204).send();
});

//DELETE ALL
app.delete('/projects', (request, response) => {
    projects = [];
    return response.status(204).send();
});

//precisamos ouvir uma porta
//precisamos escolher uma porta acima da porta 80
//segundo parÃ¢metro serÃ¡ uma funÃ§Ã£o disparada assim que o servidor conseguir ser instalado (quando conseguir subir o servidor)
app.listen(3000, () => {
    console.log('ðŸš€ Back-end started!');
});